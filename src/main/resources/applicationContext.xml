<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!-- 加载配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>	
    <context:component-scan base-package="com.test.testsys.service" />
    <context:component-scan base-package="com.test.testsys.service.impl" />
    <!-- dataSource -->
	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}"/>
		<property name="url" value="${db.url}"/>
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="initialSize" value="${db.initialSize}"/>
		<property name="maxActive" value="${db.maxActive}"/>
		<property name="maxWait" value="30000"/>
		<property name="minIdle" value="${db.minIdle}"/>
		<property name="validationQuery" value="${db.validationQuery}"/>
		<property name="testWhileIdle" value="${db.testWhileIdle}"/>
		<property name="testOnBorrow" value="${db.testOnBorrow}"/>
		<property name="testOnReturn" value="${db.testOnReturn}"/>
		<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />
		<property name="poolPreparedStatements" value="${db.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${db.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="filters" value="${db.filters}" />
	</bean> -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
		<property name="driverClassName" value="${db.driverClassName}"/>      
		<property name="url" value="${db.url}"/>     
    </bean>  
	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/test/testsys/dao/*.xml"/>
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<property name="basePackage" value="com.test.testsys.dao"/>
	</bean>
	<!-- 配置事务管理器 -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <!-- 传播行为 -->  
            <!-- REQUIRED:支持当前事务，如果当前没有事务，就新建一个事务；  
                 SUPPORTS：支持当前事务，如果当前没有事务，就以非事务的方式执行  
             -->  
            <tx:method name="save*" propagation="REQUIRED"/>  
            <tx:method name="delete*" propagation="REQUIRED"/>  
            <tx:method name="insert*" propagation="REQUIRED"/>  
            <tx:method name="update*" propagation="REQUIRED"/>  
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>  
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>  
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>  
        </tx:attributes>  
    </tx:advice>  
 	<aop:config>  
        <!-- (* com.sky.ssm.service.impl.*.*(..))中几个通配符的含义：  
             第一个 * —— 通配 任意返回值类型  
             第二个 * —— 通配 包com.sky.ssm.service.impl下的任意class  
            第三个 * —— 通配 包com.sky.ssm.service.impl下的任意class的任意方法  
            第四个 .. —— 通配 方法可以有0个或多个参数 -->  
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.test.testsys.service.impl.*.*(..))"/>  
    </aop:config>  
    <!-- 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>